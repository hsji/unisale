<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="frmLogin" width="1280" height="720" titletext="LoginFrame" cssclass="frm_LOGIN_Bg" onsize="frmLogin_onsize" onload="form_onload">
    <Layouts>
      <Layout height="720" width="1280">
        <Div id="divLogin" taborder="0" text="" left="430" top="95" width="400" height="460" background="" cssclass="div_LOGIN_Bg" formscrollbartype="none none">
          <Layouts>
            <Layout>
              <Static id="staUserId" taborder="4" left="30" top="160" height="50" cssclass="sta_LOGIN_Id" right="30"/>
              <Static id="staPassword" taborder="3" left="30" top="230" width="340" height="50" cssclass="sta_LOGIN_Pw"/>
              <Button id="btnLogin" taborder="2" text="시작하기" left="0" bottom="0" height="70" right="0" cssclass="btn_LOGIN_Start" onclick="divLogin_btnLogin_onclick"/>
              <Edit id="edtUserId" taborder="0" left="153" top="170" width="210" height="30" text="" cssclass="edt_LOGIN_Input" onkeyup="edt_keyup" inputtype="alpha,digit,english,number,sign,symbol,numberandenglish"/>
              <Edit id="edtPassword" taborder="1" left="153" top="240" width="210" height="30" password="true" text="" cssclass="edt_LOGIN_Input" onkeyup="edt_keyup" visible="true" inputtype="alpha,digit,english,number,symbol,numberandenglish"/>
              <Static id="Static00" taborder="5" left="80" top="32" width="240" height="93" cssclass="sta_LOGIN_Logo"/>
              <CheckBox id="chkSaveId" taborder="6" text="아이디저장" left="33" width="84" height="30" cssclass="chk_LOGIN_Id" bottom="104" falsevalue="false" truevalue="true"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[/**
*  DevPACK
*  @FileName 	frmLogin.xfdl
*  @Creator 	TOBESOFT
*  @CreateDate 	2020/11/24
*  @Desction   
************** 소스 수정 이력 ***********************************************
* Date					Modifier					Description
*******************************************************************************
* 2020/11/24			TOBESOFT					최초생성
*******************************************************************************
*/

/*******************************************************************************************************************************
 * FORM 변수 선언 영역
*******************************************************************************************************************************/
this.objApp = nexacro.getApplication();
/*******************************************************************************************************************************
 * FORM EVENT 영역(onload, onbeforeclose..)
*******************************************************************************************************************************/
/**
 * @description 화면 오픈
 */
this.form_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	// form size 변경시 divLogin size 변경
	this.fnDivLoginResize();
	
	this.getKey();
	
	this.fnGetId();
};

/**
 * @description 화면 리사이징
 */
this.frmLogin_onsize = function(obj:nexacro.Form,e:nexacro.SizeEventInfo)
{
	// form size 변경시 divLogin size 변경
	this.fnDivLoginResize();
};

/*******************************************************************************************************************************
 * 공통함수영역 (cfnSearch : 조회 / cfnSave : 저장 / cfnAdd : 신규 / cfnDel : 삭제 / cfnPrint : 인쇄..)
*******************************************************************************************************************************/

/*******************************************************************************************************************************
 * Transaction 서비스호출 처리 영역
*******************************************************************************************************************************/

/**
 * @description RSA Key 획득 및 자동로그인.
 */
this.getKey = function()
{
	this.setWaitCursor(true);
	// form size 변경시 divLogin size 변경
	//공통코드
	var strSvcId    = "LoginSession";
	var strSvcUrl   = "LoginSession.do";
	var inData      = "";
	var outData     = "gdsKey=dsKey gdsMessage=dsMessage gdsUser=dsLoginUser gdsCommCode=dsComboData gdsMessage=dsMessage gdsMyMenu=dsMyMenu gdsMenu=dsMenu gdsAddBtn=dsAddBtn";
	var strArg      = "sSytmFlagCd="+nexacro.getApplication().gvSytmFlagName;
	var callBackFnc = "fnCallback";

	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcUrl , 	// trabsaction을 요청할 주소
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력값으로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]
};

this.fnGetBaseInfo = function ()
{
	//공통코드
	var strSvcId    = "SearchBaseInfo";
	var strSvcUrl   = "SearchBaseInfo.do";
	var inData      = "";
	var outData     = "gdsCommCode=dsComboData gdsMessage=dsMessage gdsMyMenu=dsMyMenu gdsMenu=dsMenu gdsAddBtn=dsAddBtn";
	var strArg      = "";	
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcUrl , 	// trabsaction을 요청할 주소
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]
};

this.fnLogin = function ()
{
	this.divLogin.form.edtPassword.updateToDataset(); 
	// 정합성 체크
	this.gfnClearValidation(this.dsCond);
	this.gfnSetValidation(this.dsCond, "USER_ID", "사용자ID"	, "required");
	if (this.gfnValidation(this.dsCond, "U") == false) return;
	
	// 바인딩되지 않은 필드
	if(this.gfnValidationField(this.divLogin.form.edtPassword, "Password", "required", null, true, true) == false) return;


	//데이터셋 세팅
	this.gfnSetLoginLogDataset();
	
	// PASSWORD SHA256 DECRYPT
	var pswd = this.divLogin.form.edtPassword.value;
	var shaObj = new jsSHA("SHA-256", "TEXT");
	shaObj.update(pswd);
	var hash = shaObj.getHash("HEX");	

	this.dsCond.setColumn(0, "USER_PWD", this.gfnEncData(hash));

	// SECURITY TYPE : 무조건 1
	this.dsCond.setColumn(0, "S_KEY", "");
	this.dsCond.setColumn(0, "LOGFLAG", nexacro.getApplication().gvSytmLogFlag);
	

	//로그인
	var strSvcId    = "Login";
	var strSvcUrl   = "Login.do";
	var inData      = "dsCond=dsCond gdsLoginLog=gdsLoginLog";
	var outData     = "gdsUser=dsLoginUser gdsCommCode=dsComboData gdsMessage=dsMessage gdsMyMenu=dsMyMenu gdsMenu=dsMenu gdsAddBtn=dsAddBtn";
	var strArg      = "sSytmFlagCd="+nexacro.getApplication().gvSytmFlagCd;
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcUrl , 	// trabsaction을 요청할 주소
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]
};
/*******************************************************************************************************************************
 * Callback 영역 (Transaction, popup, message..)
*******************************************************************************************************************************/
//transaction
this.fnCallback = function (sSvcId, nErrCd, sErrMsg)
{
	switch(sSvcId) {
		case "SearchBaseInfo":
			break;
		case "Login" :	
			this.fnSetLoginResult(nErrCd,sErrMsg);
			break;
		case "LoginSession":
			this.setWaitCursor(false);
			// 세션인증사용자

			if(nexacro.getApplication().gdsUser.rowcount>0) {
				this.fnSetLoginResult(nErrCd, sErrMsg);
			} else {
				if(nexacro.getApplication().gdsKey.rowcount > 0) {
				} else {
					this.gfnAlert("msg.keyfail", "", "logout", "fnMsgCallback");
				}
			}
			break;			
		default :
	}
};
/*******************************************************************************************************************************
 * 사용자 Function 영역
*******************************************************************************************************************************/
/**
 * @description 비밀번호 변경 팝업 콜백함수
 */ 
this.fnUserSettingCallback = function (sPopupId, sRtn)
{
	switch (sPopupId) 
	{
		case "frmUserSetting" :
			if (!this.gfnIsNull(sRtn))
			{
				this.fnGoMain();	
			}
			break;
		default:
			break;
	}
};

/**
 * @description 로그인 결과 세팅
 */ 
this.fnSetLoginResult = function (nErrCd,sErrMsg)
{
	if(nErrCd == -200){
		this.gfnAlert("msg.err.tran", [sErrMsg]);
		return;
	}else if(nErrCd == 0){
		var sThemeId = this.objApp.gdsUser.getColumn(0,"THEME_ID");
		if(!this.gfnIsNull(sThemeId)){
			if(sThemeId == "02")
				nexacro.loadStyle("xcssrc::darkMode.xcss");
			else
			    nexacro.loadStyle("xcssrc::lightMode.xcss");
		}	
		
		this.fnSavePassword();
		this.fnGoMain();	
	}
};

/**
 * @description form size 변경시 divLogin size 변경
 */ 
this.fnDivLoginResize = function()
{
  	var nLeft = (nexacro.getApplication().mainframe.width / 2) - Math.round((this.divLogin.getOffsetWidth()) / 2);
  	var nTop = (nexacro.getApplication().mainframe.height / 2) - Math.round((this.divLogin.getOffsetHeight()) / 2);

	if(nLeft <= 0){
		this.divLogin.setOffsetLeft(0);
	}else{
    	this.divLogin.setOffsetLeft(nLeft);
		this.divLogin.setOffsetTop(nTop);
	}
}

/**
 * @description 메인 화면으로 이동
 */
this.fnGoMain = function()
{
	// 로그인 후처리 & 메인화면으로 이동
	this.gfnSetLogin();	
};

/**
 * @description 패스워드가져오기 (저장값)
 */
this.fnGetId = function ()
{
	var sIdSaveCheck = nexacro.getPrivateProfile("idSaveCheck");
	this.divLogin.form.chkSaveId.set_value(sIdSaveCheck);
	if(sIdSaveCheck=="true"){
		this.divLogin.form.edtUserId.set_value(nexacro.getPrivateProfile("idSave"));
		this.divLogin.form.edtPassword.setFocus();
	}else{
		this.divLogin.form.edtUserId.set_value("");
		this.divLogin.form.edtUserId.setFocus();
	}
};

/**
 * @description 패스워드세팅
 */
this.fnSavePassword = function ()
{
	nexacro.setPrivateProfile("idSaveCheck",this.divLogin.form.chkSaveId.value);
	
	if(this.divLogin.form.chkSaveId.value=="true"){
		nexacro.setPrivateProfile("idSave",this.divLogin.form.edtUserId.value);
	}
};
/*******************************************************************************************************************************
 * 각 COMPONENT 별 EVENT 영역
*******************************************************************************************************************************/
/**
 * @description 로그인 버튼 클릭 이벤트
 */ 
this.divLogin_btnLogin_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.fnLogin();
};

this.edt_keyup = function(obj:nexacro.Edit,e:nexacro.KeyEventInfo)
{
	if( e.keycode == 13){
		this.fnLogin();
	}
};

this.btn00_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{	

	var strSvcId    = "fcmProvider";
	var strSvcUrl   = "fcmProvider.do";
	var inData 		= "inDs=dsFcmIn";	//메시지, 토큰
	var outData 	= "dsFcmInOut=outDs";
	var strArg 		= "";	
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcUrl , 	// trabsaction을 요청할 주소
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]
};

this.btn01_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var strSvcId    = "apnsProvider";
	var strSvcUrl   = "apnsProvider.do";
	var inData 		= "inDs=dsFcmIn";	//메시지, 토큰
	var outData 	= "dsFcmInOut=outDs";
	var strArg 		= "";
	var callBackFnc = "fnCallback";
	
	this.gfnTransaction( strSvcId , 	// transaction을 구분하기 위한 svc id값
						strSvcUrl , 	// trabsaction을 요청할 주소
						inData , 		// 입력값으로 보낼 dataset id , a=b형태로 실제이름과 입력이름을 매칭
						outData , 		// 처리결과값으로 받을 dataset id, a=b형태로 실제이름과 입력이름을 매칭
						strArg, 		// 입력갑스로 보낼 arguments, strFormData="20120607"
						callBackFnc);   // 통신방법 정의 [생략가능]
};
]]></Script>
    <Objects>
      <Dataset id="dsCond">
        <ColumnInfo>
          <Column id="EMP_NO" type="STRING" size="256"/>
          <Column id="USER_PASSWORD" type="STRING" size="256"/>
          <Column id="USER_PWD" type="STRING" size="256"/>
          <Column id="USER_ID" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsLoginResult"/>
      <Dataset id="dsFcmIn">
        <ColumnInfo>
          <Column id="TOKEN" type="STRING" size="256"/>
          <Column id="MSG" type="STRING" size="256"/>
        </ColumnInfo>
        <Rows>
          <Row/>
        </Rows>
      </Dataset>
      <Dataset id="dsFcmInOut"/>
    </Objects>
    <Bind>
      <BindItem id="item0" compid="divLogin.form.edtUserId" propid="value" datasetid="dsCond" columnid="USER_ID"/>
    </Bind>
  </Form>
</FDL>
